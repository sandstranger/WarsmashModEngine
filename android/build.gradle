apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'
apply plugin: 'kotlin-kapt'

android {
	namespace 'net.warsmash.phone'
	compileSdkVersion target_sdk
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			aidl.srcDirs = ['src/main/java']
			renderscript.srcDirs = ['src/main/java']
			res.srcDirs = ['res']
			assets.srcDirs = ['../assets']
			jniLibs.srcDirs = ['libs']
		}
	}
	packagingOptions {
		// Preventing from license violations (more or less):
		pickFirst 'META-INF/LICENSE.txt'
		pickFirst 'META-INF/LICENSE'
		pickFirst 'META-INF/license.txt'
		pickFirst 'META-INF/LGPL2.1'
		pickFirst 'META-INF/NOTICE.txt'
		pickFirst 'META-INF/NOTICE'
		pickFirst 'META-INF/notice.txt'
		// Excluding unnecessary meta-data:
		exclude 'META-INF/robovm/ios/robovm.xml'
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/dependencies.txt'
	}
	defaultConfig {
		applicationId 'net.warsmash.phone'
		minSdkVersion min_sdk
		targetSdkVersion target_sdk
		versionCode 3
		versionName "1.0.2"
		multiDexEnabled true
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
		coreLibraryDesugaringEnabled true
	}
	
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	dataBinding {
		enabled = true
	}

	kotlinOptions {
		jvmTarget = '11'
	}

	buildFeatures {
		compose true
		buildConfig true
		viewBinding true
	}
	composeOptions {
	//	kotlinCompilerExtensionVersion '1.5.15'
	}
}

configurations { natives }

dependencies {

	implementation project(':directory-picker')
	def multidex_version = "2.0.1"
	implementation "androidx.multidex:multidex:$multidex_version"

	implementation "com.github.moxy-community:moxy-androidx:2.2.2"
	kapt "com.github.moxy-community:moxy-compiler:2.2.2"

	// Java language implementation
//	implementation "androidx.core:core:$core_version"
	// Kotlin
	implementation "androidx.appcompat:appcompat:1.7.0"
	implementation "androidx.fragment:fragment-ktx:1.8.5"
	implementation "androidx.preference:preference-ktx:1.2.1"
	implementation "com.google.android.material:material:1.12.0"
	implementation "androidx.compose.runtime:runtime:1.7.6"

	// Java language implementation
	coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
//	implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
	implementation(files("libs/gdx-backend-android-release.aar"))
	implementation  "com.badlogicgames.gdx:gdx:$gdxVersion"
	implementation  "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
	implementation  "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	implementation project(':core')
	implementation project(":libgdx-oboe")
	api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

	// This follows advice from https://blog.gradle.org/log4j-vulnerability
	constraints {
		implementation("org.apache.logging.log4j:log4j-core") {
			version {
				strictly("[2.17, 3[")
				prefer("2.17.0")
			}
			because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
		}
	}
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	doFirst {
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86_64/").mkdirs()
		file("libs/x86/").mkdirs()

		configurations.getByName("natives").copy().files.each { jar ->
    	    def outputDir = null
    	    if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
    	    if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
    	    if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
    	    if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
    	    if(outputDir != null) {
    	        copy {
    	            from zipTree(jar)
    	            into outputDir
    	            include "*.so"
    	        }
    	    }
    	}
	}
}

tasks.whenTaskAdded { packageTask ->
  if (packageTask.name.contains("package")) {
    packageTask.dependsOn 'copyAndroidNatives'
  }
}

task wrapper(type: Wrapper){
	gradleVersion = '7.4'
}

task prepareKotlinBuildScriptModel {

}
task run(type: Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr ->
			properties.load(instr)
		}
		def sdkDir = properties.getProperty('sdk.dir')
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_SDK_ROOT"
		}
	} else {
		path = "$System.env.ANDROID_SDK_ROOT"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", 'shell', 'am', 'start', '-n', 'net.warsmash.phone/net.warsmash.phone.android.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
